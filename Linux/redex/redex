#!/usr/bin/env bash

# Comprehensive Error Handling
set -euo pipefail

# Color-Coded Logging Functions
green="\033[0;32m"
yellow="\033[1;33m"
red="\033[0;31m"
nc="\033[0m" # No Color

log_info() {
  echo -e "${green}[INFO]${nc} $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

log_warning() {
  echo -e "${yellow}[WARNING]${nc} $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

log_error() {
  echo -e "${red}[ERROR]${nc} $(date '+%Y-%m-%d %H:%M:%S') - $1" >&2
}

# Progress Reporting with Command Execution
print_and_execute() {
  echo -e "${green}+ $@${nc}" >&2
  "$@"
}

# Platform-Specific Adaptation for Timeout
TIMEOUT=""
if [ "$(uname -s)" == "Linux" ]; then
  TIMEOUT="timeout -v"
elif [ "$(uname -s)" == "Darwin" ]; then
  if [ -x "$(command -v gtimeout)" ]; then
    TIMEOUT="gtimeout -v"
  else
    log_warning "gtimeout not available. Install with 'brew install coreutils'."
  fi
fi

# Usage Instructions
usage() {
  cat << EOF
Usage: $(basename "$0") [options] <command>

Options:
  --help                Show this help message and exit.
  -o, --output FILE     Specify output file name and location (default: output.log).

Examples:
  $(basename "$0") "ls -la"
  $(basename "$0") -o custom_output.log "echo Hello, World!"
EOF
}

# Argument Validation
if [[ $# -eq 0 ]]; then
  log_error "No arguments provided. Use --help for usage instructions."
  exit 1
fi

# Parse Arguments
output_file="output.log"
while [[ $# -gt 0 ]]; do
  case $1 in
    --help)
      usage
      exit 0
      ;;
    -o|--output)
      if [[ -n ${2-} ]]; then
        output_file="$2"
        shift
      else
        log_error "--output requires a file name."
        exit 1
      fi
      ;;
    *)
      command="$1"
      shift
      break
      ;;
  esac
  shift
done

# Execute Command and Redirect Output
if [[ -z ${command-} ]]; then
  log_error "No command provided to execute. Use --help for usage instructions."
  exit 1
fi

log_info "Executing command: $command"
print_and_execute $command > "$output_file" 2>&1
log_info "Command output saved to $output_file"
