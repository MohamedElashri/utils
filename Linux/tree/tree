#!/bin/bash

# Handle installation if --install flag is passed
if [ "$1" = "--install" ]; then
    # Create ~/.local/bin if it doesn't exist
    mkdir -p ~/.local/bin

    # Download the script to ~/.local/bin/tree
    cp "$0" ~/.local/bin/tree
    chmod +x ~/.local/bin/tree

    # Add ~/.local/bin to PATH if not already there
    if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
        shell_rc="$HOME/.bashrc"
        # Check if using zsh
        if [ -n "$ZSH_VERSION" ]; then
            shell_rc="$HOME/.zshrc"
        fi
        echo 'export PATH="$HOME/.local/bin:$PATH"' >> "$shell_rc"
        export PATH="$HOME/.local/bin:$PATH"
    fi

    echo "Installation complete! You can now use 'tree' command."
    echo "Please restart your terminal or run: source ~/.bashrc (or ~/.zshrc)"
    exit 0
fi

# Default values
max_depth=2  # Default depth of 2 levels, use -1 for unlimited
current_depth=0
dir_count=0
file_count=0
show_hidden=false  # Don't show hidden files by default

# ANSI color codes
COLOR_DIR="\033[1;34m"    # Bold blue for directories
COLOR_FILE="\033[0m"      # Default color for regular files
COLOR_SYMLINK="\033[1;36m"  # Bold cyan for symbolic links
COLOR_EXEC="\033[1;32m"     # Bold green for executables
COLOR_RESET="\033[0m"

print_usage() {
    echo "Usage: $0 [OPTIONS] [directory]"
    echo "Options:"
    echo "  -L level     Descend only level directories deep (default: 2)"
    echo "  -a           Show all (including hidden files)"
    echo "  -h           Display this help message"
}

# Function to print the tree structure
print_tree() {
    local path="$1"
    local prefix="$2"
    local depth="$3"

    # Check if we've reached maximum depth
    if [ $max_depth -ne -1 ] && [ $depth -gt $max_depth ]; then
        return
    fi

    # Get list of files and directories, sorted alphabetically
    local ls_opts="-1"
    if [ "$show_hidden" = true ]; then
        ls_opts="${ls_opts}A"
    fi
    local items=($(ls $ls_opts "$path" 2>/dev/null | sort))

    local count=${#items[@]}
    local index=0

    for item in "${items[@]}"; do
        ((index++))
        local full_path="$path/$item"
        
        # Determine the next prefix based on whether this is the last item
        local next_prefix
        if [ $index -eq $count ]; then
            next_prefix="$prefix└── "
            current_prefix="$prefix└── "
        else
            next_prefix="$prefix├── "
            current_prefix="$prefix├── "
        fi

        # Determine the type and color of the item
        if [ -L "$full_path" ]; then
            # Symbolic link
            local link_target=$(readlink "$full_path")
            echo -e "$prefix$current_prefix${COLOR_SYMLINK}$item -> $link_target${COLOR_RESET}"
        elif [ -d "$full_path" ]; then
            # Directory
            echo -e "$prefix$current_prefix${COLOR_DIR}$item${COLOR_RESET}"
            ((dir_count++))
            
            # Recursively process directory
            if [ $index -eq $count ]; then
                print_tree "$full_path" "$prefix    " $((depth + 1))
            else
                print_tree "$full_path" "$prefix│   " $((depth + 1))
            fi
        else
            # Regular file
            if [ -x "$full_path" ]; then
                # Executable file
                echo -e "$prefix$current_prefix${COLOR_EXEC}$item${COLOR_RESET}"
            else
                # Regular file
                echo -e "$prefix$current_prefix${COLOR_FILE}$item${COLOR_RESET}"
            fi
            ((file_count++))
        fi
    done
}

# Parse command line arguments
while getopts "L:ah" opt; do
    case $opt in
        L)
            max_depth=$OPTARG
            if ! [[ "$max_depth" =~ ^[0-9]+$ ]]; then
                echo "Error: -L requires a numeric argument"
                exit 1
            fi
            ;;
        h)
            print_usage
            exit 0
            ;;
        \?)
            echo "Invalid option: -$OPTARG"
            print_usage
            exit 1
            ;;
        a)
            show_hidden=true
            ;;
    esac
done

# Shift the arguments to get the directory
shift $((OPTIND-1))

# Set the starting directory
start_dir="${1:-.}"

# Check if directory exists
if [ ! -d "$start_dir" ]; then
    echo "Error: Directory '$start_dir' does not exist"
    exit 1
fi

# Print the root directory name
echo -e "${COLOR_DIR}${start_dir}${COLOR_RESET}"

# Start the recursive function
print_tree "$start_dir" "" 0

# Print summary
echo
echo "$dir_count directories, $file_count files"
