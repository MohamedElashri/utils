#!/bin/bash

# Path: $HOME/.local/bin/txm

# Check if the terminal supports colors
if [ -t 1 ] && [ -n "$TERM" ] && [ "$TERM" != "dumb" ]; then
  RED='\033[0;31m'
  YELLOW='\033[0;33m'
  GREEN='\033[0;32m'
  BLUE='\033[0;34m'
  MAGENTA='\033[0;35m'
  NC='\033[0m' # No Color
else
  RED=''
  YELLOW=''
  GREEN=''
  BLUE=''
  MAGENTA=''
  NC=''
fi

# Logging functions
log_info() {
  echo -e "${GREEN}[INFO]${NC} $1"
}

log_warning() {
  echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
  echo -e "${RED}[ERROR]${NC} $1"
}

# Display usage information
usage() {
  local term_width=$(tput cols 2>/dev/null || echo 80)
  local cmd_col_width=0
  local args_col_width=0
  local desc_col_width=0
  local padding=2
  local usage_data=(
    "create|[session_name]|Create a new tmux or screen session"
    "list||List all tmux or screen sessions"
    "attach|[session_name]|Attach to a tmux or screen session"
    "detach||Detach from the current tmux session (not supported for screen)"
    "delete|[session_name]|Delete a tmux or screen session"
    "new-window|[session_name] [name]|Create a new window in a tmux session"
    "list-windows|[session_name]|List windows in a tmux session"
    "kill-window|[session_name] [name]|Kill a window in a tmux session"
    "rename-session|[session_name] [new_name]|Rename an existing tmux session"
    "rename-window|[session_name] [window_index] [new_name]|Rename a window in a tmux session"
    "split-window|[session_name] [window_index] [vertical|horizontal]|Split a pane in a tmux window"
    "list-panes|[session_name] [window_index]|List all panes in a tmux window"
    "kill-pane|[session_name] [window_index] [pane_index]|Kill a specific pane in a tmux window"
    "move-window|[session_name] [window_index] [new_session]|Move a window to another tmux session"
    "swap-window|[session_name] [window_index_1] [window_index_2]|Swap two windows in a tmux session"
    "resize-pane|[session_name] [window_index] [pane_index] [resize_option]|Resize a pane in a tmux window"
    "send-keys|[session_name] [window_index] [pane_index] [keys]|Send keys to a pane in a tmux window"
  )

  # Calculate maximum widths
  for line in "${usage_data[@]}"; do
    IFS='|' read -r cmd args desc <<< "$line"
    [ ${#cmd} -gt $cmd_col_width ] && cmd_col_width=${#cmd}
    [ ${#args} -gt $args_col_width ] && args_col_width=${#args}
  done

  # Add padding
  cmd_col_width=$((cmd_col_width + padding))
  args_col_width=$((args_col_width + padding))
  
  # Calculate description column width
  desc_col_width=$((term_width - cmd_col_width - args_col_width - padding))

  printf "${BLUE}Usage:${NC} txm [command] [arguments]\n"
  printf "${BLUE}Commands:${NC}\n"
  print_usage_line "Command" "Arguments" "Description"
  print_usage_line "-------" "---------" "-----------"

  for line in "${usage_data[@]}"; do
    IFS='|' read -r cmd args desc <<< "$line"
    print_usage_line "$cmd" "$args" "$desc"
  done

  exit 1
}

print_usage_line() {
  local command="$1"
  local arguments="$2"
  local description="$3"
  
  printf "${GREEN}%-${cmd_col_width}s${NC}${YELLOW}%-${args_col_width}s${NC}" "${command}" "${arguments}"
  print_wrapped_text "${description}" $desc_col_width $((cmd_col_width + args_col_width))
}

print_wrapped_text() {
  local text="$1"
  local width="$2"
  local indent="$3"
  local line=""
  local word=""
  local first_line=true
  
  for word in $text; do
    if [ $((${#line} + ${#word} + 1)) -le $width ] || [ -z "$line" ]; then
      line="$line $word"
    else
      if [ "$first_line" = true ]; then
        printf "%s" "${line# }"
        first_line=false
      else
        echo
        printf "%${indent}s%s" "" "${line# }"
      fi
      line=" $word"
    fi
  done
  
  if [ -n "$line" ]; then
    if [ "$first_line" = true ]; then
      printf "%s" "${line# }"
    else
      echo
      printf "%${indent}s%s" "" "${line# }"
    fi
  fi
  echo
}




# Check for tmux or screen installation
if command -v tmux &> /dev/null; then
  TMUX_AVAILABLE=true
else
  log_warning "tmux is not installed. Falling back to screen."
  TMUX_AVAILABLE=false
  if ! command -v screen &> /dev/null; then
    log_error "Neither tmux nor screen is installed. Please install one of them and try again."
    exit 1
  fi
fi

# Main script logic
case "$1" in
  -h|--help)
    usage
    ;;

  create)
    if [ -z "$2" ]; then
      log_error "Please specify a session name."
      usage
    fi
    if [ "$TMUX_AVAILABLE" = true ]; then
      if tmux new-session -d -s "$2" 2>/dev/null; then
        log_info "Session '$2' created with tmux."
      else
        log_error "Failed to create tmux session '$2'. It may already exist."
      fi
    else
      if screen -S "$2" -dm; then
        log_info "Session '$2' created with screen."
      else
        log_error "Failed to create screen session '$2'. It may already exist."
      fi
    fi
    ;;

  list)
    if [ "$TMUX_AVAILABLE" = true ]; then
      if ! tmux list-sessions 2>/dev/null; then
        log_warning "No tmux sessions found."
      fi
    else
      if ! screen -ls 2>/dev/null; then
        log_warning "No screen sessions found."
      fi
    fi
    ;;

  attach)
    if [ -z "$2" ]; then
      log_error "Please specify a session name to attach."
      usage
    fi
    if [ "$TMUX_AVAILABLE" = true ]; then
      if tmux attach-session -t "$2" 2>/dev/null; then
        log_info "Attached to tmux session '$2'."
      else
        log_error "Failed to attach to tmux session '$2'. It may not exist."
      fi
    else
      if screen -r "$2"; then
        log_info "Attached to screen session '$2'."
      else
        log_error "Failed to attach to screen session '$2'. It may not exist."
      fi
    fi
    ;;

  detach)
    if [ "$TMUX_AVAILABLE" = true ]; then
      if tmux detach-client 2>/dev/null; then
        log_info "Detached from the current tmux session."
      else
        log_error "Failed to detach. Are you in a tmux session?"
      fi
    else
      log_warning "Detach is not supported for screen sessions from this script. Use Ctrl-a d to detach."
    fi
    ;;

  delete)
    if [ -z "$2" ]; then
      log_error "Please specify a session name to delete."
      usage
    fi
    if [ "$TMUX_AVAILABLE" = true ]; then
      if tmux kill-session -t "$2" 2>/dev/null; then
        log_info "tmux session '$2' deleted."
      else
        log_error "Failed to delete tmux session '$2'. It may not exist."
      fi
    else
      if screen -S "$2" -X quit; then
        log_info "screen session '$2' deleted."
      else
        log_error "Failed to delete screen session '$2'. It may not exist."
      fi
    fi
    ;;

  new-window)
    if [ -z "$2" ] || [ -z "$3" ]; then
      log_error "Please specify both session name and window name."
      usage
    fi
    if [ "$TMUX_AVAILABLE" = true ]; then
      if tmux new-window -t "$2" -n "$3" 2>/dev/null; then
        log_info "Window '$3' created in tmux session '$2'."
      else
        log_error "Failed to create window '$3' in tmux session '$2'."
      fi
    else
      log_warning "Creating new windows is not supported for screen sessions from this script."
    fi
    ;;

  list-windows)
    if [ -z "$2" ]; then
      log_error "Please specify a session name to list windows."
      usage
    fi
    if [ "$TMUX_AVAILABLE" = true ]; then
      if ! tmux list-windows -t "$2" 2>/dev/null; then
        log_warning "No windows found in tmux session '$2'."
      fi
    else
      log_warning "Listing windows is not supported for screen sessions from this script."
    fi
    ;;

  kill-window)
    if [ -z "$2" ] || [ -z "$3" ]; then
      log_error "Please specify both session name and window name to kill."
      usage
    fi
    if [ "$TMUX_AVAILABLE" = true ]; then
      if tmux kill-window -t "$2":"$3" 2>/dev/null; then
        log_info "Window '$3' in tmux session '$2' deleted."
      else
        log_error "Failed to delete window '$3' in tmux session '$2'."
      fi
    else
      log_warning "Killing windows is not supported for screen sessions from this script."
    fi
    ;;

  *)
    log_error "Invalid command."
    usage
    ;;
esac
